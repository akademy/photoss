/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhotosFromPanel_Folder.java
 *
 * Created on 22-Dec-2011, 22:30:04
 */

package uk.co.akademy.PhotoShow;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author matthew
 */
public class PhotosFromPanel_Folder extends AbstractPhotosFromPanel {

    /** Creates new form PhotosFromPanel_Folder */
    public PhotosFromPanel_Folder() {
        initComponents();

		this.setName( "Folders" );
		this.updateAddOrDeleteButton( "PhotosFromPanel_Folder" ); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foldersScrollPane = new javax.swing.JScrollPane();
        foldersList = new javax.swing.JList();
        folderTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        addOrDeleteButton = new javax.swing.JButton();

        foldersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        foldersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        foldersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                foldersListValueChanged(evt);
            }
        });
        foldersList.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                foldersListCaretPositionChanged(evt);
            }
        });
        foldersList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                foldersListKeyReleased(evt);
            }
        });
        foldersScrollPane.setViewportView(foldersList);

        folderTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                folderTextFieldKeyReleased(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        addOrDeleteButton.setText("Delete");
        addOrDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(foldersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(folderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addOrDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foldersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addOrDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fileChooser.setAcceptAllFileFilterUsed(false);

		if (fileChooser.showDialog(null, "Select folder") == JFileChooser.APPROVE_OPTION)
		{
			File file = fileChooser.getSelectedFile();

			folderTextField.setText(file.getAbsolutePath());
			this.updateAddOrDeleteButton("browseButtonActionPerformed");
		}

	}//GEN-LAST:event_browseButtonActionPerformed

	private void addOrDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrDeleteButtonActionPerformed
		String folder = folderTextField.getText();

		if( this.haveFolder( folder ) ) {
			this.deleteFolder( folder );
		} else {
			this.addFolder( folder );
			
			folderTextField.setText("");
		}

	}//GEN-LAST:event_addOrDeleteButtonActionPerformed

	private void foldersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_foldersListValueChanged
		folderTextField.setText( (String) foldersList.getSelectedValue() );
		this.updateAddOrDeleteButton("foldersListValueChanged");
	}//GEN-LAST:event_foldersListValueChanged

	private void foldersListCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_foldersListCaretPositionChanged

		this.updateAddOrDeleteButton("foldersListCaretPositionChanged");
	}//GEN-LAST:event_foldersListCaretPositionChanged

	private void foldersListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_foldersListKeyReleased
		
		this.updateAddOrDeleteButton("foldersListKeyReleased");
	}//GEN-LAST:event_foldersListKeyReleased

	private void folderTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_folderTextFieldKeyReleased
		this.updateAddOrDeleteButton( "folderTextFieldKeyReleased" );
	}//GEN-LAST:event_folderTextFieldKeyReleased

	private void updateAddOrDeleteButton( String function ) {

		String folder = folderTextField.getText();

		//System.out.println( "updateAddOrDeleteButton:" + function + " - " + folder );

		addOrDeleteButton.setEnabled( !folder.isEmpty() );

		if( this.haveFolder( folder ) ) {
			addOrDeleteButton.setText("Delete");
		}
		else {
			addOrDeleteButton.setText("Add");
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOrDeleteButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField folderTextField;
    private javax.swing.JList foldersList;
    private javax.swing.JScrollPane foldersScrollPane;
    // End of variables declaration//GEN-END:variables

	@Override
	protected boolean initialise(PropertyFetcher properties) {
		String folders = properties.getProperty("folder.folders");
        foldersList.setListData( folders.split(";") );

		return true;
	}

	@Override
	protected void updateProperties() {
		String folders = "";
		int foldersListSize = foldersList.getModel().getSize();

		if( foldersListSize > 0 ) {
			folders += foldersList.getModel().getElementAt(0);

			if( foldersListSize > 1 ) {
				for(int i = 1; i < foldersListSize; i++) {
					folders += ";" + foldersList.getModel().getElementAt(i);
				}
			}
		}

		Program.setProperty( "folder.folders", folders );
	}

	private java.util.ArrayList<String> getFolders() {
		ArrayList<String> folders = new ArrayList<String>();

		for(int i = 0; i < foldersList.getModel().getSize(); i++) {
			folders.add( (String) foldersList.getModel().getElementAt(i));
		}

		return folders;
	}

	private boolean haveFolder( String folder ) {
		ArrayList<String> folders = this.getFolders();

		return folders.contains(folder);
	}

	private void addFolder( String folder ) {
		ArrayList<String> folders = this.getFolders();

		folders.add(folder);

		foldersList.setListData( folders.toArray() );
	}

	private void deleteFolder( String folder ) {
		ArrayList<String> folders = this.getFolders();

		folders.remove(folder);

		foldersList.setListData( folders.toArray() );
	}

}
